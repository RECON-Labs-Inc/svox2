##################
#  PRE-PROCESS  #
##################
#  DESCRIPTION
#  Chains the prepocessing steps for a video

# USAGE:
# pre_process_poses.sh <PROJECT_FOLDER> <[OPTIONAL] LOG_FILE> <MS_DOWNSAMPLING>


# DETAILED DESCRIPTION:
# Chains the following steps (please see pre_process.py for reference)

# 2. Computes poses (raw)
# 3. Exports the poses and calibration
# 4. Undistorts the images and puts them in a folder
# 5. Recomputes the poses using the undistorted images
# 6. Exports the poses and calibration to cam_data.json file,

# Note:
# If you don't input a log file name it will be generated by default at <PROJECT_FOLDER>/logs/pipeline/pre_process_poses.log"
#

## Check if env vars exist
if ! [ -z $PROJECT_FOLDER ]
then
    echo
    echo "PROJECT_FOLDER env var exists, using it."
    echo $PROJECT_FOLDER
fi

PROJECT_FOLDER=${PROJECT_FOLDER:-$1}
LOG_FILE=${2:-$PROJECT_FOLDER"/logs/pipeline/pre_process_poses.log"}

echo
echo $LOG_FILE
echo

MS_DOWNSAMPLING=${3:-2}
echo "Pre-proccessing logging to "$LOG_FILE
echo "Using MS downsampling: "$MS_DOWNSAMPLING

cd $RL_RUNPATH

time_log_file=$PROJECT_FOLDER/logs/time_pre_process_poses.log
total_log=$PROJECT_FOLDER/logs/time_total.log
tic.sh $time_log_file

python -m workflow.compute_poses --image_data_path $PROJECT_FOLDER/source/images --chunk_type raw_poses --remove_unaligned --out_dir $PROJECT_FOLDER/project_files --ms_downscale $MS_DOWNSAMPLING 2>&1 | tee "$LOG_FILE"
python -m workflow.export_cam_poses --ms_filename ms_poses.psz --chunk_type raw_poses --cam_json_filename cam_data.json --out_dir $PROJECT_FOLDER/project_files 2>&1 | tee -a "$LOG_FILE"
python -m workflow.write_calibration --ms_filename ms_poses.psz --chunk_type raw_poses --cam_json_filename cam_data.json --out_dir $PROJECT_FOLDER/project_files 2>&1 | tee -a "$LOG_FILE"
EXIT_STATUS=${PIPESTATUS[0]:-1}
toc.sh $time_log_file $total_log




if [ $EXIT_STATUS -eq 0 ]
then
    echo "Pose computation was was successful"
else
    echo "Pose computation failed"
fi


# --- CONVERT TO TANKS AND TEMPLES FORMAT

echo
echo "Convert to tnt"
time convert_to_tnt.sh $PROJECT_FOLDER  $PROJECT_FOLDER "images"  2>&1 | tee -a "$LOG_FILE"

EXIT_STATUS=${PIPESTATUS[0]:-1}
if [ $EXIT_STATUS -eq 0 ]
then
    echo "Conversion to TNT succesful"
else
    echo "Conversion to TNT failed"
fi

exit $EXIT_STATUS




